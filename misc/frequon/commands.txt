## TASK: intro

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Interested?

Hi,
We are looking for a smart guy with extraordinary hacking skills.
Our mutual friend assured us that you are our men.

TL;DR: We are observing a group of terrorists that are planning something.
We have intercepted some data, but do not know how to read it (attached).

Somewhere there is a password. We have to find it to stop terrorists.
Would you like to join our team? Help us and we will help you in future.

It’s not clear how to start. Our flink told us that the key is somehow related with three key phrases: `guns`, `and`, `roses`. Probably these are names of some messages.
Would you check if you have access to any of them?

If you want to help, please type:
`frequon(subject = "Re: Interested?", content = "Text of the message that you have access to")`
so as we could read the message too.

Remember: any time you want, you can get some piece of advice, just
type: `frequon(hint=TRUE)`.

## TASK: task1

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Frequencies

We are so glad you want to help us!

Thank you for the message, it looks interesting... However, this text
is to long to be one password we are seeking. This must be some coded
message, if only we could know the key...

But let`s take a look, the `p` letter appears very often. And
`i` does`t. In english language letter `e` would occures
most often. If we would know how often each letter is used in
the message, we could compare them with known english
letter frequencies! So let`s to this!

We are going to prepare data about frequencies of letters
in english, so if you could find the frequencies in the messages,
that would be awesome (to trzeba zmienic :P).

Send us reply: `frequon(subject = "Re: Frequencies", content = `freq`)` as soon as you
will finish. `freq` is the vector of frequencies for each letter.
Please, remember to name this vector with respective letters!

## TASK: task2

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Transcription

Great job! Now, when we know which letters are used most often
and which are the least common, we can combine them with known
english frequencies of letters. We have prepared and attached
the `EnglishLetterFrequency` dataset. It contains relative
frequencies of letters in the english language.

Now you can substitute old ciphered letters with the new
english letters. Can you show us your results?

Send us reply: `frequon(subject = "Re: Transcription", content = "textyouwillget")`.
We wish you luck!

Best regards!

## TASK: task3

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Key

Well done! Now we are so close! Our message looks a little bit familiar,
there are even some words we know. But there are also still words,
looking strange. It means that our key is not fully
correct, and we need to investigate these letters, that were
mistranslated.

There is one idea how to do this.

Zliczmy wszystkie wyrazy, te, które pojawiają się najczęściej sa dla nas łatwe do
poprawienia. Te które pojawiają się najrzadziej być może są łatwo rozpoznawalnymi
rzeczownikami?

Take advantage of `top100commonWords`.

Type:
`frequon( subject="Re: Key", content=c(old = "abcdef....z", new = "newlettersrespectively"))`
where `old` are the letters in the code`s sense and `new` are fitted real letters.

## TASK: task4

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Next text

Excellent work, you have cracked the code!

However there is no password in here.
There must be some clue in this message...

What do you think about possibility that our friend used the key
to ciphere the names of two remaining messages?
Would you have access to them now?

Please, send us reply:
`frequon(subject = "Re: Next text: X",
          content = "Content of the unlocked message")`

where "X" is the name of that message you are able to unlock.

We would be grateful.

## TASK: task5

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Lengths in the text

Obviously this message is also ciphered. We tried to use the key
but turns out it was written in some language we unfortunatelly don`t know.
Can you recognize the langague?

Don`t worry, we know some simple idea how to recognize the language of the any
ciphered message. All you need to do is to measure the length of each word. If we would
know how many words has the length of 1, 2, 3, and so on, we could compare
them with the lengths of words in languages that we know! Naturally we need some
huge amount of words in plenty languages. It`s just as well we have a sample from
wikipedia resources, so we can share it with you.
Please, find the `wikiquotes` attachment. There is a list of quotes for many languages.
We hope this is enough for our needs.

This is huge job to measure the length of each word for all languages, but we believe
you know some fast way to (.... coś byle nie do this).

Send us your results:
`frequon(subject="Re: Lengths in the text", content = `lengths`, attachment = `wiki_lengths`)`.
`lengths` is the vector of tabeled length of all words.
`wiki_lengths` is the list of tabeled length of all words for each language.
Please, remember to name this list with respective languages!

Thanks to this data we would be able to prepare couple barplots to conclude about
the similarities between distribution of the lengths in our message and known languages.

## TASK: task6

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Language in the message

Well done! Thanks to your results we obtain excellent barplots (you can probably
also see them in your magic program :P). Now we can investigate
what the language was used to prepare the second message.
How do you think: which from the all distributions is most similar to
the distribution of the lengths in our message?

Send us your thoughts! Type
`frequon(subject = "Re: Language in and message", content = "Language")`
where "Language" is the name of the right language.

## TASK: task7

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Password

Tak też i nam się wydaje. Świetna robota, teraz znamy klucz, znamy język...
Może zanim zaczniemy tłumaczyć tę wiadomość, spróbujmy uzyskać dostęp
do ostatniej the `guns`. Wiemy, że nasz przyjaciel lubi wykorzystywać
klucz jednej zagadki do kodowania nazwy innej, więc może i tym razem...
Czy wiesz, jak jest po Słoweńsku `guns`?

My zajmujemy się tłumaczeniem wiadomości. Jeśli znajdziesz coś interesującego
w trzeciej z naszych wiadomości, prosimy, daj nam znać!

`frequon(subject = "Re: Password", content = "thePasswordYouWillFind")`.

## TASK: outro

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: You are the champion!

## TASK: hint1

Firstly try to answer the following questions:
  * Does R treat "A" and "a" as the same letter?
  * Is "word" and "word," the same word for R?

The functions like: "tolower()/toupper()", "gsub()" might be usefull to handle these issues. Consider replacing all non-alphanumeric  characters with empty strings ("").
The easiest way to deal with these kinds of problem is to use regex. String: "[^a-z ]" allows you to extract all non-letter charaters with spaces.

Finally familiarize yourself with "strsplit()" and "table()" to count all letters easily.
The `letters` R-object may also be very helpful for the problem.

To see whose letters occure most frequently use `sort()`.

## TASK: hint2

Manual subsitution may by pretty labourious, that is why you probably do apprieciate a `chartr()` function :) Remember to convert all letters to lowercases.

## TASK: hint4

All you need is to split all text by spaces and table all created words. Do you remember how `strsplit()` work?

If you did this, try to put old letters in alphabetical order.

## TASK: hint5

Remember that if we have `old` as ciphered and `new` as real letters, we need to find  real letters in `new` and seeking their translation in the `old` character string.

## TASK: hint6

There is a very useful function in R to measure number of characters in words. Take advantage of `nchar()` function. Remember to split the string into single words with `strsplit()` as you did it before. To measure the length of each words correctly watch all comas and dots! Does the length of "dots." and "dots" is the same? `gsub()` function with "[^a-z ]" regex may be helpful here (but only if you convert your text to lowercase!).

Do the same with all elements of `wikiquotes` list. You may use `for` loop or even `lapply` function to do this easier and faster!

## TASK: hint7

Compare distributions using `barplot()` function for counted lengths of words in the message and counted lengths of words in all languages.

## TASK: errorIntro

We were looking so long for somebody like you, who could
help us to solve this mistery. If you don`t have access to the
messages, than we need to ask someone else :(

## TASK: errorNAs

Nice try, but there are one or more missing values (NA) in given vector.
Fill all the NAs and then try to pass the vector again.

## TASK: errorFrequencies

There is something wrong with given frequencies... Have you converted text to
lowercase? Are you sure you did this right?

## TASK: errorNoNAMES

The vector you have passed does not contain names. Please, pass named vector.

## TASK: errorLetters

You did not pass frequencies for all letters :(

## TASK: errorDecipher

This translation seems to doesn`t fit to the `roses`.
Did you sorted `freq` vector before translation correctly?

## TASK: errorKey1

We don't understand the `key` value in given form. Type again the key you found in the
following form: c(old = 'oldlettersabcd...z', new = 'newlettersrespectively')

## TASK: errorKey2

Don`t you think, that lengths of `old` and `new` both should be equal to 26?
This is the number of all letters in Latin alphabet.

Please, correct this mistake and try again.

## TASK: errorBadKey

Nice try, however this key does not traslate the message correctly.
Are you sure everything is all right?

## TASK: errorBadX

According to the our first our remaining messages are named "guns" and "and".
so X should be one from these names.

## TASK: errorBadX2

Have you really unlocked the "guns" message?

## TASK: errorBadAND

We cannot open the message. Try again, maybe you send a bad file?

## TASK: errorWikiNames

Names of attachment don`t match. Please, send us `lengths` with names accordant
with `wikiquotes` names.

## TASK: errorLengths

There is something wrong with the method you count length of words in the message
or `wikiqoutes` file. Please, try again.

## TASK: errorLanguage

We don`t think this is the right answer. The language you proposed doesn`t fit to
our message.

## TASK: errorEnd

We afraid this is not the password we are looking for. Are you sure there is nothing
else to see?

## TASK: errorAttachment

It seems that you might have forgotten to attach files. Please, send this message
with the attachement.

## TASK: errorContent

Send this message without content?

## TASK: errorSubject

Do You Want to Send This Message Without a Subject?

