## TASK: intro
 _____ _          _____                            _____
|_   _| |_ ___   |   __|___ ___ ___ _ _ ___ ___   |   __|___ _____ ___
  | | |   | -_|  |   __|  _| -_| . | | | . |   |  |  |  | .'|     | -_|
  |_| |_|_|___|  |__|  |_| |___|_  |___|___|_|_|  |_____|__,|_|_|_|___|
                                 |_|
You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Interested?

Hi,
We are looking for a smart guy with extraordinary hacking skills.
Our mutual friend assured us that you are our man.

TL;DR: We are observing a group of terrorists that are planning something.
We have intercepted some data, but do not know how to read it (attached).

There is a password somewhere. We have to find it to stop terrorists.
Would you like to join our team? Help us and we will help you in the future.

It's not clear how to start. Our informer told us that the key is somehow related with three key phrases: `guns`, `and`, `roses`.
Probably these are the names of some messages / datasets.
Would you like to check if you have access to any of them?

If you want to help, please type:
`frequon(subject = "Re: Interested?", content = "Text of the message that you have access to")`
so as we could read the message too.

Remember: any time you want, you can get some piece of advice, just
type: `frequon(hint=TRUE)`.

## TASK: task1

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Frequencies

We are so glad you want to help us!

Thank you for the message, it looks interesting...
However, this text is too long to be the password that we are seeking for.
This must be some coded message. If only we could know the key...

But let`s take a look.
The `p` letter appears very often.
And `i` doesn`t. In English language letter `e` occurs most often.
If we knew how often each letter is used in the message, we could compare them with well-known English letter frequencies! So let`s do this!

Take the message that you have found, remove everything that is not a letter and calculate frequencies of letters.
The result should be a named vector with names corresponding to letters and values corresponding to number of occurrences.

Send us a reply: `frequon(subject = "Re: Frequencies", content = `freq`)` as soon as you finish. `freq` is the vector of frequencies for each letter.
Please, remember to name this vector with appropriate letters!

## TASK: task2

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Transcription

Great job! Now, when we do know which letters are used the most often and which are the least common, we can combine them with well-known English frequencies of letters.
We have prepared and attached the `EnglishLetterFrequency` dataset.
It contains frequencies of letters in the English language.

Now you can substitute old ciphered letters with the new English letters according to their frequencies in the attached corpus.
Such operation is called character translation / transliteration.
Can you pass the transliterated message to us?

Send us reply: `frequon(subject = "Re: Transcription", content = "text_you_will_get")`.
We wish you luck!

Best regards!

## TASK: task3

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Key

Well done! We are so close now! Our message looks a little bit familiar.
There are even some words that we can recognize.
But there are still some words that are looking strange.
It means that our key is not completely correct and we need to correct these letters that were mistranslated.

Let's use the word frequency to correct the transliteration.

Let's count all the words.
Those, which appear the most often, are for us easy to amend.
The ones which appear the least often are perhaps easily recognisable nouns?

Take advantage of `top100commonWords`.
Find the right transliteration in order to decode it into the proper English.
Work with lowercased text.

Type:
`frequon( subject="Re: Key", content=c(old = "abcdef....z", new = "newlettersrespectively"))`, where `old` are the letters in the code`s sense and `new` are fitted real letters.

Good luck!

## TASK: task4

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Next text

Excellent work, you have cracked the code!

However, there is no password in here.
There must be some clue in this message...

Perhaps our friend used the key to cipher the names of the two remaining messages?
Can you have access to them now?

Transliterate these names: 'guns', 'and', 'roses' and check if there are datasets with these new names.

Please, send us reply:
`frequon(subject = "Re: Next text",
          content = "Content of the unlocked message")`.

We would be grateful.

## TASK: task5

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Lengths in the text

This message is written in a language that we cannot don`t know.
Can you recognize the language?

We know a simple idea how to recognize the language of any message.
All you need to do is to measure the length of each word. If we knew how many words had the lengths of 1, 2, 3, and so on, we could compare them with the lengths of the words in languages that we know!

Naturally, we need a huge amount of words in many languages.
Fortunately we have a sample from wikipedia resources, so we can share it with you.
Please, find the `wikiquotes` attached.

There is a list of quotes in many languages.
We hope this will be enough for our needs.

Note that different languages are using different letters, thus to find words use the space ` ` as a separator.

This is a time-consuming job to measure the length of each word for all of the languages, but we believe that you know some fast way to cope with this problem.

Send us your results:
`frequon(subject="Re: Lengths in the text", content = `lengths`, attachment = `wiki_lengths`)`.
`lengths` is the vector of counts of words of given length (named vector with names - lengths and values - counts).
`wiki_lengths` is the list with vectors of counts for each language.
Please, remember to name this list with appropriate languages!

## TASK: task6

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Language in the message

Well done!

Now we need to compare frequencies for our message and frequencies for other languages.
Try to plot barplots for each language and then a barplot for out message.
It will be easier to compare these frequencies graphically.

Now we can investigate what language was used to prepare the second message.
What do you think?
Which distribution is the most similar to the distribution of the lengths in our message?

Send us your thoughts! Type:
`frequon(subject = "Re: Language in and message", content = "Language")`
where "Language" is the name of the correct language.

## TASK: task7

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: Password

We think so too. Great job! Now we have the key, we know the language...
Perhaps before we start translating this message, we will try to get an access to the phrase 'guns'.
We know that our friend likes to use the key from one puzzle in order to encode the name of the other one. So maybe also this time...
Do you know what is the Romanian counterpart of the word 'guns'?

We are responsible for translating the message. If you find something interesting in the third of our messages, let us know, please!

Type:
`frequon(subject = "Re: Password", content = "thePasswordYouWillFind")`.

## TASK: outro

You've Got Mail

From: 154eb7278fc44650bdd2bb39bb2b5c69@mail.tor
To: c81632dce28ca740f2f2503656f3d62a@mail.tor
Subject: You are the best!

## TASK: hint1

Firstly, try to answer the following questions:
  * Does R treat "A" and "a" as the same letter?
  * Is "word" and "word," the same word for R?

The functions like: "tolower()/toupper()", "gsub()" might be useful to handle these issues. Consider replacing all non-alphanumeric characters with empty strings ("").
The easiest way to deal with this kind of problem is to use regex. String: "[^a-z ]" allows you to extract all non-letter characters with spaces.

Finally familiarize yourself with "strsplit()" and "table()" to count all of the letters easily.
The `letters` R-object may also be very helpful for the problem.

To see which letters occur the most frequently use `sort()`.

## TASK: hint2

Manual substitution may by pretty demanding. This is why you may appreciate a `chartr()` function :) Remember to convert all letters to lowercases.

## TASK: hint0

Check if you have access to any data with name like `guns`, `and` or `roses`.
If yes, then send it through the `frequon()` function.

## TASK: hint4

All you need to do is split the whole text by spaces and table all created words. Do you remember how `strsplit()` function works?

If you do this, try to put old letters in alphabetical order.

## TASK: hint5

Remember that if we have `old` as ciphered letters and `new` as real ones, we need to find real letters in `new` and seek for their translation in the `old` character string.

## TASK: hint6

There is a very useful function in R to measure number of characters in words. Take advantage of `nchar()` function.
Remember to split the string into single words with `strsplit()` as you probably did before.
To check the length of each word correctly pay attention to all comas and dots!
Is the length of "dots." and "dots" the same? `gsub()` function with "[.,;!:]" regex may be helpful here (only if you convert your text to lowercase!).

Do the same thing with all of the elements of the `wikiquotes` list. You may use `for` loop or even `lapply` function to do this
easier and faster!

## TASK: hint7

Compare distributions using `barplot()` function for counted lengths of words in the message and counted lengths of words in all languages.

## TASK: errorIntro

We were looking so long for somebody like you who could help us solve this mystery.
If you don`t have access to the messages, than we will have to ask someone else :(

## TASK: errorNAs

Nice try, but there is one or more missing values (NAs) in the given vector.
Replace all the NAs and then try to pass the vector again.

## TASK: errorFrequencies

There is something wrong with the given frequencies...
Have you converted the text to lowercase?
Are you sure you did this properly?
Some letters do not occur in the message (like 'k'), but make sure that frequency for them is 0 in the vector.

## TASK: errorNoNAMES

The vector that you passed does not contain names. Please, pass named vector.

## TASK: errorLetters

You did not pass frequencies for all of the letters :(

## TASK: errorDecipher

This translation seems not to fit to the `roses`.
Did you sort `freq` vector correctly before translation?

## TASK: errorKey1

We don't understand the `key` value in the given form. Type again the key you found in the
following form: c(old = 'oldlettersabcd...z', new = 'newlettersrespectively')

## TASK: errorKey2

Don`t you think that both lengths of `old` and `new` should be equal to 26?
This is the number of all letters in the Latin alphabet.

Please, correct this mistake and try again.

## TASK: errorBadKey

Nice try. However, this key does not translate the message correctly.
Are you sure that everything is all right?

## TASK: errorBadX

According to the first our remaining messages are named "guns" and "and".
This is why X should be one of these names.

## TASK: errorBadX2

Have you really unlocked the "guns" message?

## TASK: errorBadAND

We can not open the message. Try again. Maybe you sent a bad file?

## TASK: errorWikiNames

Names of attachment are incorrect. Please, send us `lengths` with names according to `wikiquotes` names.

## TASK: errorLengths

There is something wrong with the way you count the lengths of the words in the message. Please, try again. It should be a names vector with number of words with given length.

## TASK: errorLengths0

Lengths of words in message are ok, but something is wrong with the way you count the lengths of the words in `wikiqoutes` file. The result should be a list with names of languages and vectors of frequencies. Please, try again.

## TASK: errorLanguage

We don`t think that this is the right answer. The language you suggested doesn`t fit our message.

## TASK: errorEnd

We are afraid this is not the password that we are looking for. Are you sure there is nothing
else to see?

## TASK: errorAttachment

It seems that you might have forgotten to attach files.
Please, send this message with the attachment.

## TASK: errorContent

Did you send this message without content?

## TASK: errorSubject

Do You Want to Send This Message Without the Subject?

